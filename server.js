// Generated by CoffeeScript 1.10.0
(function() {
  var Promise, Server, _, events, exec, fs, hprose, pm2;

  hprose = require('hprose');

  _ = require('lodash');

  events = require('events');

  Promise = require('bluebird');

  exec = require('child_process').exec;

  pm2 = require('pm2');

  fs = require('fs');

  Server = (function() {
    function Server() {
      this.push_recorder = {};
      this.server = new hprose.HttpService();
      this.server.add({
        get_app_list: this.get_app_list.bind(this),
        reload: this.reload_app.bind(this),
        restart: this.restart_app.bind(this),
        git: this.git.bind(this)
      });
      this.init_publish();
      this.server.publish('console');
    }

    Server.prototype.true_app_list = function() {
      return new Promise(function(resolve, reject) {
        return pm2.list(function(err, list) {
          if (err) {
            return reject(err);
          }
          return resolve(_.filter(list, function(l) {
            return l.name !== 'lgp-monitor';
          }));
        });
      });
    };

    Server.prototype.get_git_version = function(path) {
      return new Promise(function(resolve, reject) {
        var cmd, version;
        cmd = exec("cd " + path + " && git rev-parse HEAD");
        version = '';
        cmd.stdout.on('data', function(data) {
          return version += data;
        });
        return cmd.on('exit', function() {
          return resolve(version);
        });
      });
    };

    Server.prototype.get_app_list = function(has_cwd) {
      if (has_cwd == null) {
        has_cwd = false;
      }
      return this.true_app_list().then((function(_this) {
        return function(apps) {
          return Promise.map(apps, function(app) {
            var path;
            path = app.pm2_env.pm_cwd;
            return new Promise(function(resolve, reject) {
              return fs.exists(path + "/.git", function(exists) {
                var obj;
                obj = {
                  name: app.name,
                  git: exists,
                  mode: app.pm2_env.exec_mode
                };
                if (has_cwd === true) {
                  obj.cwd = path;
                }
                return resolve(obj);
              });
            }).then(function(obj) {
              if (!obj.git) {
                obj.git_version = '';
                return Promise.resolve(obj);
              } else {
                return _this.get_git_version(path).then(function(version) {
                  obj.git_version = version;
                  return Promise.resolve(obj);
                });
              }
            });
          });
        };
      })(this));
    };

    Server.prototype.start_push_log = function(name) {
      var cmd;
      this.console("开始输出" + name + "的日志");
      cmd = exec("pm2 logs " + name);
      cmd.stdout.on('data', (function(_this) {
        return function(data) {
          return _this.server.push(name, data);
        };
      })(this));
      return this.push_recorder[name].cmd = cmd;
    };

    Server.prototype.end_push_log = function(name) {
      if (this.push_recorder[name].cmd != null) {
        this.console("结束输出" + name + "的日志");
        this.push_recorder[name].cmd.kill();
        return this.push_recorder[name].cmd = null;
      }
    };

    Server.prototype.init_publish = function() {
      return this.true_app_list().then((function(_this) {
        return function(apps) {
          return _.map(apps, function(app) {
            var name, push_events;
            name = app.name;
            _this.push_recorder[name] = {
              pushing: false,
              cmd: null
            };
            push_events = new events.EventEmitter();
            push_events.on('subscribe', function(id, context) {
              if (_this.push_recorder[name].pushing === true) {
                return;
              }
              _this.push_recorder[name].pushing = true;
              return _this.start_push_log(name);
            });
            push_events.on('unsubscribe', function(id, context) {
              _this.console(id + "退订，剩余" + (_this.server.idlist(name).length) + "个客户端");
              if (_this.server.idlist(name).length === 0) {
                _this.push_recorder[name].pushing = false;
                return _this.end_push_log(name);
              }
            });
            return _this.server.publish(name, {
              events: push_events
            });
          });
        };
      })(this));
    };

    Server.prototype.console = function(msg) {
      return this.server.push('console', msg + "\n");
    };

    Server.prototype.reload_app = function(name) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          _this.console("重载" + name + "中，请稍等...");
          return pm2.reload(name, function(err) {
            if (err) {
              return reject(err);
            }
            _this.console("重载" + name + "完成");
            return resolve();
          });
        };
      })(this));
    };

    Server.prototype.restart_app = function(name) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          _this.console("重启" + name + "中，请稍等...");
          return pm2.restart(name, function(err) {
            if (err) {
              return reject(err);
            }
            _this.console("重启" + name + "完成");
            return resolve();
          });
        };
      })(this));
    };

    Server.prototype.git = function(name) {
      return this.get_app_list(true).then((function(_this) {
        return function(apps) {
          return new Promise(function(resolve, reject) {
            var app, cmd;
            app = _.find(apps, function(_app) {
              return _app.name === name && _app.git === true;
            });
            if (app === void 0) {
              reject(new Error('无匹配的应用'));
            }
            cmd = exec("cd " + app.cwd + " && git pull -u origin master");
            cmd.stdout.on('data', function(data) {
              return _this.console(data);
            });
            return cmd.on('exit', function() {
              return resolve(app.cwd);
            });
          });
        };
      })(this)).then((function(_this) {
        return function(path) {
          return _this.get_git_version(path);
        };
      })(this));
    };

    Server.prototype.start = function() {
      return this.server.start();
    };

    return Server;

  })();

  module.exports = Server;

}).call(this);

//# sourceMappingURL=server.js.map
