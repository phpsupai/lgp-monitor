// Generated by CoffeeScript 1.10.0
(function() {
  var appModel, viewModel;

  ko.bindingHandlers.trigger = {
    init: function(element, valueAccessor) {
      return $(element).click(function() {
        var value;
        value = valueAccessor();
        value(!value());
        return false;
      });
    }
  };

  ko.bindingHandlers.textBottom = {
    update: function(element, valueAccessor) {
      var e, txt, value;
      value = valueAccessor();
      txt = ko.unwrap(value);
      e = $(element).parent();
      $(element).text(txt);
      return e.scrollTop(e[0].scrollHeight);
    }
  };

  appModel = (function() {
    function appModel(parent, data1) {
      this.parent = parent;
      this.data = data1;
      ko.mapping.fromJS(this.data, {}, this);
      this.log = ko.observable('');
      this.show_log = ko.observable(false);
      this.show_log.subscribe((function(_this) {
        return function(v) {
          if (v === true) {
            return _this.parent.client.subscribe(_this.name(), function(data) {
              return _this.log("" + (_this.log()) + data);
            });
          } else {
            return _this.parent.client.unsubscribe(_this.name());
          }
        };
      })(this));
      this.reloading = ko.observable(false);
      this.restarting = ko.observable(false);
      this.pulling = ko.observable(false);
    }

    appModel.prototype.reload = function() {
      if (this.reloading() === true) {
        return;
      }
      this.reloading(true);
      return this.parent.client.reload(this.name())["catch"](function(err) {
        alert('发生错误，请查看控制台');
        return console.log(err);
      }).whenComplete((function(_this) {
        return function() {
          return _this.reloading(false);
        };
      })(this));
    };

    appModel.prototype.restart = function() {
      if (this.restarting() === true) {
        return;
      }
      this.restarting(true);
      return this.parent.client.restart(this.name())["catch"](function(err) {
        alert('发生错误，请查看控制台');
        return console.log(err);
      }).whenComplete((function(_this) {
        return function() {
          return _this.restarting(false);
        };
      })(this));
    };

    appModel.prototype.pull = function() {
      if (this.pulling() === true) {
        return;
      }
      this.pulling(true);
      return this.parent.client.git(this.name()).then((function(_this) {
        return function(version) {
          return _this.git_version(version);
        };
      })(this))["catch"](function(err) {
        alert('发生错误，请查看控制台');
        return console.log(err);
      }).whenComplete((function(_this) {
        return function() {
          return _this.pulling(false);
        };
      })(this));
    };

    appModel.prototype.clear_log = function() {
      return this.log('');
    };

    return appModel;

  })();

  viewModel = (function() {
    function viewModel() {
      this.client = new hprose.Client.create("/api", ['get_app_list', 'reload', 'restart', 'git']);
      this.app_list = ko.observableArray([]);
      this.list_loading = ko.observable(true);
      this.get_app_list();
      this.log = ko.observable('欢迎使用lgp-monitor\n');
      this.client.subscribe('console', (function(_this) {
        return function(data) {
          return _this.log("" + (_this.log()) + data);
        };
      })(this));
    }

    viewModel.prototype.get_app_list = function() {
      return this.client.get_app_list().then((function(_this) {
        return function(rows) {
          return _this.app_list(_.map(rows, function(row) {
            return new appModel(_this, row);
          }));
        };
      })(this))["catch"]((function(_this) {
        return function(err) {
          return alert('发生错误，请查看控制台');
        };
      })(this)).whenComplete((function(_this) {
        return function() {
          return _this.list_loading(false);
        };
      })(this));
    };

    viewModel.prototype.refresh_list = function() {
      if (this.list_loading() === true) {
        return;
      }
      this.list_loading(true);
      this.app_list([]);
      return this.get_app_list();
    };

    return viewModel;

  })();

  $(function() {
    ko.applyBindings(new viewModel());
    return $('.ko-hide').removeClass('ko-hide');
  });

}).call(this);

//# sourceMappingURL=index.js.map
